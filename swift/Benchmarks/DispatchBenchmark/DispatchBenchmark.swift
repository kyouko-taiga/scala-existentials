// Benchmark boilerplate generated by Benchmark

import Benchmark
import Foundation
import DispatchInheritance
import DispatchExistential
import Lcg

let benchmarks: () -> () = {
  let classesCounts: [UInt64] = [2, 8, 32]
  let valuesCount = 100
  let config = Benchmark.Configuration(
      metrics: [BenchmarkMetric.throughput],
      //warmupIterations: 10,
      maxDuration: .seconds(10)
      //maxIterations: 30
  )
  for classesCount in classesCounts {
    var random = Lcg.Random(seed: 0xACE1)
    let inheritanceValues: [DispatchInheritance.C] = (0 ..< valuesCount).map { _ in DispatchInheritance.randomC(random: &random, classesCount: classesCount) }
    random = Lcg.Random(seed: 0xACE1)
    let existentialValues: [any DispatchExistential.C] = (0 ..< valuesCount).map { _ in DispatchExistential.randomAnyC(random: &random, classesCount: classesCount) }

    Benchmark("dispatchInheritance(classesCount:\(classesCount))", configuration: config) { _ in
      var sum: Double = 0
      for i in 0..<valuesCount {
        sum += inheritanceValues[i].f()
      }
      blackHole(sum)
    }

    Benchmark("dispatchExistential(classesCount:\(classesCount))", configuration: config) { _ in
      var sum: Double = 0
      for i in 0..<valuesCount {
        sum += existentialValues[i].f()
      }
      blackHole(sum)
    }
  }
}
